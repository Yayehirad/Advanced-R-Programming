# Assessment
swirl()
# Assessment
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
func(dat)# Write your code here!
# Remember: the last expression evaluated will be returned!
}
evaluate(function(x){x+1},6)
evaluate(function(x){1},c(8, 4, 0))
evaluate(function(x){[1]},c(8, 4, 0))
evaluate(function(x)[1],c(8, 4, 0))
evaluate(function(x)[1],c(8, 4, 0))
info()
evaluate(function(x){x+1},6)
info()
play()
evaluate(function(x){[1]},c(8, 4, 0))
evaluate(function(x),c(8, 4, 0, [1]))
evaluate(function(x),c(8, 4, 0), [1])
a=c(8, 4, 0)
a[1]
c(8, 4, 0)[1]
evaluate(function(x),c(8, 4, 0)[1])
evaluate(function(x){},c(8, 4, 0)[1])
evaluate(function(x){c(8, 4, 0)[1]})
nxt()
evaluate(function(x){c(8,4,0)[1]})
evaluate(function(x){x[1]})
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programing","is","fun!")
paste("Programming","is","fun!")
submit
submit()
telegram("How are you John")
submit()
submit()
mad_libs("Melbourne","graduate","Monash")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
map_chr(c(5,3,4),int_to_string)
bye()
sapply
lapply
apply
swirl()
map_lgl(c(1,2,3,4,5),function(x){x>3})
map_lgl(c(1, 2, 3, 4, 5), gt, b = 3)
map_if(c(1,2,3,4),is_even)
map_if(c(1,2,3,4),function(x){is_even(x)},function(y){y^2})
map_if(c(1,2,3,4),function(x){is_even(x)},function(y){y^2}%>% unlist())
map_if(c(1,2,3,4),function(x){is_even(x)},function(y){y^2})%>% unlist()
map_if(c(1, 2, 3, 4),is_even,square)
map_at(c(4, 6, 2, 3, 8),c(1,3,4),square)
map2_chr(letters,1:26,paste)
bye()
library(swirl)
library(swirl)
library(swirl)
swirl()
map_chr(C(5,3,4),int_to_string)
map_chr(c(5,3,4),int_to_string)
map_lgl(c(1,2,3,4,5),gt(b=3))
map_lgl(c(1,2,3,4,5),gt,b=3)
map_if(c(1,2,3,4),is_even,square)
map_at(c(4,6,2,3,8),c(1,3,4),square)
map2_chr(1:26,letters,paste)
map2_chr(letters,1:26,paste)
reduce(c(1,3,5,7),add_talk)
reduce(c("a", "b", "c", "d"),paste_talk)
reduce_right(c("a", "b", "c", "d"),paste_talk)
has_element(random_ints,45)
detect(random_ints,is_even)
detect_index(random_ints,is_even)
keep(random_ints,is_even)
discard(random_ints,is_even)
every(random_ints,lt,b=100)
every(random_ints,<100)
every(random_ints,function(x){x<100})
gt_10 <- partial(function(x){x>10})
gt
gt_10 <- partial(gt,b=10)
gt_10(11)
walk(mark_antony,message)
two_plus_five <- quote(2+5)
```
two_plus_five <- quote(2+5)
#look your new expression
two_plus_five
#or evaluate
eval(two_plus_five)
my_new_env <- new.env()
my_new_env$x<-4
my_new_env$x
assign("y",9,envir = my_new_env)
get("y",envir = my_new_env)
ls(my_new_env)
# remove asignment
rm(y,envir = my_new_env)
#check
exists("y",envir = my_new_env)
exists("x",envir = my_new_env)
search()
x <- 10
my_func <- function(){
x <- 5
return(x)
}
my_func()
x <- 10
x
assign1 <- function(){
x <<- "Wow!"
}
assign1()
x
stop("Something erroneous has occured!")
#Error: Something erroneous has occured!
name_of_func <- function(){stop("Something bad happened.")}
name_of_func()
error_if_n_is_greater_than_zero(5)
error_if_n_is_greater_than_zero <- function(n){
stopifnot(n <= 0)
n
}
error_if_n_is_greater_than_zero(5)
warning("Consider yourself warned!")
warning("Generating an NA.")
NA
make_NA <- function(x){
warning("Generating an NA.")
NA
}
make_NA("Sodium")
warning("Consider yourself warned!")
make_NA <- function(x){
warning("Generating an NA.")
NA
}
make_NA("Sodium")
make_NA <- function(x){
warning("Generating an NA.")
NA
}
make_NA("Sodium")
make_NA <- function(x){
warning("Generating an NA.")
NA
}
make_NA("Sodium")
make_NA <- function(x){
warning("Generating an NA.")
NA
}
make_NA("Sodium")
message("In a bottle.")
message("Hanos is a Gombaying Girl!")
print("Hanos is a Gombaying Girla!")
print("Hanos is a Gombaying Girl!")
swirl()
bye()
check_n_value <- function(n) {
if(n > 0) {
stop("n should be <= 0")
}
}
error_if_n_is_greater_than_zero <- function(n){
check_n_value(n)
n
}
error_if_n_is_greater_than_zero(5)
#Error in check_n_value(n): n should be <= 0
traceback()
check_n_value <- function(n) {
if(n > 0) {
browser()  ## Error occurs around here
stop("n should be <= 0")
}
}
check_n_value <- function(n) {
if(n > 0) {
browser()  ## Error occurs around here
stop("n should be <= 0")
}
}
browser()
check_n_value <- function(n) {
if(n > 0) {
browser()  ## Error occurs around here
stop("n should be <= 0")
}
}
error_if_n_is_greater_than_zero(5)
check_n_value <- function(n) {
if(n > 0) {
stop("n should be <= 0")
}
}
error_if_n_is_greater_than_zero(5)
trace()
trace("check_n_value")
trace("check_n_value")
trace()
trace("check_n_value")
check_n_value
error_if_n_is_greater_than_zero(5)
## Turn on debugging state for 'lm' function
debug(lm)
## Turn on debugging state for 'lm' function
debug(lm)
error_if_n_is_greater_than_zero(5)
options(error = recover)
error_if_n_is_greater_than_zero(5)
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
Q
sink()
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
undebug(ls)
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
undebug(lm)
library(microbenchmark)
microbenchmark(a <- rnorm(1000),
b <- mean(rnorm(1000)))
quit()
library(microbenchmark)
microbenchmark(a <- rnorm(10),
b <- mean(rnorm(10)))
class(1)
special_num_1
special_num_1<- structure(1, class="special_numbe")
special_num_1
